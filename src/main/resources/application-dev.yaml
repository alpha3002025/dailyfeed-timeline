spring:
  application:
    name: dailyfeed-timeline
  ## database connection
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: ${MYSQL_JDBC_URL:jdbc:mysql://localhost:23306/dailyfeed?characterEncoding=UTF-8&serverTimezone=UTC&rewriteBatchedStatements=true}
    username: ${MYSQL_USERNAME:dailyfeed}
    password: ${MYSQL_PASSWORD:hitEnter###}
    hikari:
      jdbc-url: ${MYSQL_JDBC_URL:jdbc:mysql://localhost:23306/dailyfeed?characterEncoding=UTF-8&serverTimezone=UTC&rewriteBatchedStatements=true}
      driver-class-name: com.mysql.jdbc.Driver
      username: ${MYSQL_USERNAME:dailyfeed}
      password: ${MYSQL_PASSWORD:hitEnter###}
      schema: ${MYSQL_SCHEMA:dailyfeed}
  ## jpa
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true
    database-platform: org.hibernate.dialect.MySQL8Dialect
  ## devtools
  devtools:
    restart:
      enabled: false
  ## paging 관련
  data:
    web:
      pageable:
        max-page-size: 100
        default-page-size: 20
    redis:
      port: ${REDIS_PORT:26379}
      host: ${REDIS_HOST:localhost}
    mongodb:
      protocol: mongodb+srv # mongodb+srv or mongodb (atlas 에서만 mongodb+srv)
      uri: ${MONGODB_CONNECTION_URI:mongodb+srv://dailyfeed-search:hitEnter###@alpha300.sz30zco.mongodb.net/dailyfeed?retryWrites=true&w=majority&appName=alpha300&connectTimeoutMS=30000&socketTimeoutMS=30000&serverSelectionTimeoutMS=30000}
  jackson:
    serialization:
      write-dates-as-timestamps: false
  ## kafka
  kafka:
    bootstrap-servers: ${KAFKA_HOST:localhost}:29092,${KAFKA_HOST:localhost}:29093,${KAFKA_HOST:localhost}:29094
    listener:
      ack-mode: manual_immediate # 수동 커밋 (TODO 확인 필요)
      concurrency: 3 # 컨슈머 스레드 수 (TODO 확인 필요)
      poll-timeout: 3000
      missing-topics-fatal: false  # 토픽이 없어도 시작 가능
    consumer:
      group-id: ${spring.application.name}-group
      auto-offset-reset: latest
      enable-auto-commit: false # At Least Once 를 위한 수동 커밋
      max-poll-records: 500
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "click.dailyfeed.code.domain.content,click.dailyfeed.code.domain.member"
        session.timeout.ms: 30000
        heartbeat.interval.ms: 10000
        max.poll.interval.ms: 300000
        isolation.level: read_committed
        partition.assignment.strategy: org.apache.kafka.clients.consumer.CooperativeStickyAssignor
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: 1
      retries: 3
      batch-size: 32768
      linger-ms: 20
      buffer-memory: 33554432
      compression-type: snappy
      properties:
        enable.idempotence: false
        max.in.flight.requests.per.connection: 5
        spring.json.add.type.headers: false
        #        spring.json.trusted.packages: "click.dailyfeed.code.domain.content.post.dto"
        spring.json.trusted.packages: "*"
        retry.backoff.ms: 100
        request.timeout.ms: 30000
springdoc:
  packages-to-scan: click.dailyfeed.timeline.domain
  default-consumes-media-type: application/json;charset=UTF-8
  default-produces-media-type: application/json;charset=UTF-8
  cache:
    disabled: true    # 캐시 사용 여부
  api-docs:
    path: /api-docs/json
    groups:
      enabled: true
  swagger-ui:
    enabled: true               # Swagger enable 할지 결정
    path: /demo-ui.html         # Swagger 접근 경로
    tags-sorter: alpha          # 알파벳 순 Tag 정렬, method: HTTP Method 순 정렬
    operations-sorter: alpha    # 알파벳 순 Tag 정렬, method: HTTP Method 순 정렬

logging:
  level:
    click.dailyfeed.timeline.client: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.springframework.kafka: INFO

dailyfeed:
  services:
    member:
      feign:
        url: ${MEMBER_SERVICE_URL:http://localhost:8081}
        timeout:
          connect: 5000
          read: 10000
    timeline:
      feign:
        url: ${TIMELINE_SERVICE_URL:http://localhost:8082}
        timeout:
          connect: 5000
          read: 10000
      push-pull:
        limit: 1000
    content:
      comment:
        max-depth: 2    # 댓글 최대 깊이
        page-size: 20   # 기본 페이지 크기
    search:
      feign:
        url: ${SEARCH_SERVICE_URL:http://localhost:8083}
        timeout:
          connect: 5000
          read: 10000

infrastructure:
  mongodb:
    timeline:
      database: dailyfeed
  redis:
    event-queue:
      post-activity-event:
        list-key: POST_ACTIVITY_EVENT_HISTORY
        dead-letter-list-key: POST_ACTIVITY_EVENT_HISTORY_DEAD
        batch-size: 1000
      post-like-activity-event:
        list-key: POST_LIKE_ACTIVITY_EVENT_HISTORY
        dead-letter-list-key: POST_LIKE_ACTIVITY_EVENT_HISTORY_DEAD
        batch-size: 1000
      comment-activity-event:
        list-key: COMMENT_ACTIVITY_EVENT_HISTORY
        dead-letter-list-key: COMMENT_ACTIVITY_EVENT_HISTORY_DEAD
        batch-size: 1000
      comment-like-activity-event:
        list-key: COMMENT_LIKE_ACTIVITY_EVENT_HISTORY
        dead-letter-list-key: COMMENT_LIKE_ACTIVITY_EVENT_HISTORY_DEAD
        batch-size: 1000
  kafka:
    default:
      producer:
        partition: 6
        replication-factor: 2
        compression: snappy
        retention-ms: 604800000 # 7일
        operation-timeout-seconds: 30
    topic:
      post-activity:
        prefix: post-activity-
        prefix-date-format: yyyyMMdd
        retention-ms: 604800000 # 7일
    consumers:
      # Post Activity Consumer
      post-activity:
        group-id: post-activity-consumer-group
        concurrency: 3
      # User Activity Consumer 설정
      user-activity:
        group-id: user-activity-consumer-group
        concurrency: 2
      # Notification Consumer 설정
      notification:
        group-id: notification-consumer-group
        concurrency: 1
server:
  port: 8082