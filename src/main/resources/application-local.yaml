spring:
  application:
    name: dailyfeed-timeline
  ## database connection
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_SCHEMA}?characterEncoding=UTF-8&serverTimezone=UTC&rewriteBatchedStatements=true
    username: ${MYSQL_USERNAME:dailyfeed}
    password: ${MYSQL_PASSWORD:hitEnter@@@}
    hikari:
      jdbc-url: jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_SCHEMA}?characterEncoding=UTF-8&serverTimezone=UTC&rewriteBatchedStatements=true
      driver-class-name: com.mysql.jdbc.Driver
      username: ${MYSQL_USERNAME:dailyfeed}
      password: ${MYSQL_PASSWORD:hitEnter@@@}
      schema: ${MYSQL_SCHEMA:dailyfeed}

  ## jpa
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true
    database-platform: org.hibernate.dialect.MySQL8Dialect
  ## devtools
  devtools:
    restart:
      enabled: false
  ## paging 관련
  data:
    web:
      pageable:
        max-page-size: 100
        default-page-size: 20
    redis:
      port: ${REDIS_PORT:6379}
      host: ${REDIS_HOST:redis-master.infra.svc.cluster.local}
    mongodb:
      protocol: mongodb+srv # mongodb+srv or mongodb (atlas 에서만 mongodb+srv)
      uri: ${MONGODB_CONNECTION_URI:mongodb+srv://dailyfeed-search:hitEnter$$$@alpha300.sz30zco.mongodb.net/dailyfeed?retryWrites=true&w=majority&appName=alpha300}
  ## kafka
  kafka:
    bootstrap-servers: ${KAFKA_HOST:localhost}:${KAFKA_PORT:9092}
    consumer:
      group-id: post-activity-consumer-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "click.dailyfeed.code.domain.content,click.dailyfeed.code.domain.member"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    properties:
      security:
        protocol: ${KAFKA_SASL_PROTOCOL}
      sasl:
        mechanism: ${KAFKA_SASL_MECHANISM}
        jaas:
          config:
            org.apache.kafka.common.security.scram.ScramLoginModule required username="${KAFKA_USER}" password="${KAFKA_PASSWORD}";

springdoc:
  packages-to-scan: click.dailyfeed.timeline.domain
  default-consumes-media-type: application/json;charset=UTF-8
  default-produces-media-type: application/json;charset=UTF-8
  cache:
    disabled: true    # 캐시 사용 여부
  api-docs:
    path: /api-docs/json
    groups:
      enabled: true
  swagger-ui:
    enabled: true               # Swagger enable 할지 결정
    path: /demo-ui.html         # Swagger 접근 경로
    tags-sorter: alpha          # 알파벳 순 Tag 정렬, method: HTTP Method 순 정렬
    operations-sorter: alpha    # 알파벳 순 Tag 정렬, method: HTTP Method 순 정렬

logging:
  level:
    click.dailyfeed.timeline.client: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.springframework.kafka: INFO

dailyfeed:
  services:
    member:
      feign:
        url: ${MEMBER_SERVICE_URL:http://localhost:8081}
        timeout:
          connect: 5000
          read: 10000
    timeline:
      feign:
        url: ${TIMELINE_SERVICE_URL:http://localhost:8082}
        timeout:
          connect: 5000
          read: 10000
    content:
      comment:
        max-depth: 2    # 댓글 최대 깊이
        page-size: 20   # 기본 페이지 크기
    search:
      feign:
        url: ${SEARCH_SERVICE_URL:http://localhost:8083}
        timeout:
          connect: 5000
          read: 10000

infrastructure:
  mongodb:
    timeline:
      database: dailyfeed
  redis:
    event-queue:
      post-activity-event:
        list-key: POST_ACTIVITY_EVENT_HISTORY
        dead-letter-list-key: POST_ACTIVITY_EVENT_HISTORY_DEAD
        batch-size: 1000
  kafka:
    topic:
      post-activity:
        prefix: post-activity-
        prefix-date-format: yyyyMMdd
        retention-ms: 604800000 # 7일
    consumers:
      # Post Activity Consumer
      post-activity:
        group-id: post-activity-consumer-group
        concurrency: 3
      # User Activity Consumer 설정
      user-activity:
        group-id: user-activity-consumer-group
        concurrency: 2
      # Notification Consumer 설정
      notification:
        group-id: notification-consumer-group
        concurrency: 1
server:
  port: 8080